---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Musiclapse">
	<main class="h-screen flex flex-col justify-center items-center">
		<div class="container">
			<article class="flex items-center">
				<div class="glows"></div>

				<span class="header">
					<svg
						id="Capa_10"
						data-name="Capa 10"
						xmlns="http://www.w3.org/2000/svg"
						viewBox="0 0 391 535.2"
						><defs
							><style>
								.cls-1 {
									fill: #d21f3c;
								}
								.cls-2 {
									fill: #fff;
								}
							</style></defs
						><title>ml-logo</title><path
							class="cls-1"
							d="M520.42,57.13A240.46,240.46,0,0,0,399.5,24h-1A242,242,0,0,0,277.08,57.13,245.84,245.84,0,0,0,207,119.27V409a453.65,453.65,0,0,0,72.69,77.67,445.63,445.63,0,0,0,119.19,71.71,444.71,444.71,0,0,0,118.88-71.71A449,449,0,0,0,590,409V119.27A242.55,242.55,0,0,0,520.42,57.13ZM544,407.89c-13,14.81-30.54,33.13-54.88,50.54-33.29,23.82-66,37.57-90,46.57h-0.18c-24.08-9-57.24-22.75-90.53-46.57A325.33,325.33,0,0,1,253,408V119l0.25,0.66c10-8.2,27.07-20.09,53.36-30C344.48,75.35,381,74,398.62,74h0.76c17.62,0,53.89,1.35,91.76,15.64C517.43,99.57,534,111.19,544,119.39v288.5Z"
							transform="translate(-203 -23.18)"></path><path
							class="cls-2"
							d="M302,182.5c-10.14.79-19,1.64-33.58,0.17a241.69,241.69,0,0,1-32.75-6L265.33,190c13.89,0.5,25.89.5,39.78,1Z"
							transform="translate(-203 -23.18)"></path><path
							class="cls-2"
							d="M496.3,182.5c10.14,0.79,19,1.64,33.58.17a241.69,241.69,0,0,0,32.75-6L533,190c-13.89.5-25.89,0.5-39.78,1Z"
							transform="translate(-203 -23.18)"></path><path
							class="cls-2"
							d="M397.75,364.67l27.67-.42A79.93,79.93,0,0,1,445.25,322q8.9,43.5,17.82,87l-64.48,48.5L334,408.94q8.9-43.5,17.8-87a79.71,79.71,0,0,1,19.74,42.27l27.54,0.42"
							transform="translate(-203 -23.18)"></path><path
							class="cls-2"
							d="M398,352H377.69c-4-10-10.35-46.94-20.51-60.92C348.58,279.25,339,270,332,263.5V237c-10-14.09-24.88-58.85-31.92-81-18-7.94-37.31-15.39-55.27-23.33Q236.1,119.83,227.4,107a203.75,203.75,0,0,0,32.28,21.5c13.67,7.33,36.87,15,36.84,14.85-0.22-1.36-5.94-36.46-6.33-41.1l-63.25-35.5L203,23.18A303.2,303.2,0,0,0,244.94,62.5a303.29,303.29,0,0,0,55.4,34,181.59,181.59,0,0,0,18.1,65.61c9.37,18.95,20.68,33.87,29.67,42.87h1.15L360,182.13l4.79,6.27L387.67,168l0.17,4.65L398,156l12.8,26,8.2-7.84L433.5,191l-1.83-9L448,205l0.92-.27A178.83,178.83,0,0,0,496.65,96.52a303.29,303.29,0,0,0,55.4-34A303.18,303.18,0,0,0,594,23.18L570.05,66.75l-63.25,35.5c-0.39,4.64-6.11,39.74-6.34,41.1,0,0.17,23.16-7.52,36.82-14.85A203.32,203.32,0,0,0,569.53,107c-5.81,8.56-11.66,17.11-17.47,25.67-18,7.94-37.69,15.39-55.64,23.33-7,22.15-22.42,66.91-32.42,81v26.5a193.15,193.15,0,0,0-24.68,27.58c-10.16,14-16.06,50.92-20,60.92H398Z"
							transform="translate(-203 -23.18)"></path></svg
					>
				</span>

				<h1 class="text-6xl mt-5 uppercase font-bold">Musiclapse</h1>
				<h5 class="text-2x: { x: number; y: number; }l uppercase">
					Next level of music
				</h5>
				<a
					href="https://www.youtube.com/@musiclapse"
					class="flex flex-row items-center transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-80 border-2 border-transparent duration-150 mt-8 px-6 py-2 hover:border-2 hover:text-white hover:border-white rounded-full shadow-sm"
					>Youtube
					<svg
						class="ml-1"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						stroke-width="2"
						stroke="currentColor"
						fill="none"
						stroke-linecap="round"
						stroke-linejoin="round"
						><path stroke="none" d="M0 0h24v24H0z" fill="none"
						></path><path d="M17 7l-10 10"></path><path
							d="M8 7l9 0l0 9"></path></svg
					></a
				>
			</article>
		</div>
	</main>
</Layout>

<script>
	const CONTAINER: HTMLElement | null = document.querySelector(".container");
	const CARDS = document.querySelectorAll("article");

	const CONFIG = {
		proximity: 40,
		spread: 80,
		blur: 20,
		gap: 32,
		vertical: false,
		opacity: 0,
	};

	const PROXIMITY = 10;

	const UPDATE = (event: PointerEvent) => {
		// get the angle based on the center point of the card and pointer position
		for (const CARD of CARDS) {
			// Check the card against the proximity and then start updating
			const CARD_BOUNDS = CARD.getBoundingClientRect();
			// Get distance between pointer and outerbounds of card
			if (
				event?.x > CARD_BOUNDS.left - CONFIG.proximity &&
				event?.x <
					CARD_BOUNDS.left + CARD_BOUNDS.width + CONFIG.proximity &&
				event?.y > CARD_BOUNDS.top - CONFIG.proximity &&
				event?.y <
					CARD_BOUNDS.top + CARD_BOUNDS.height + CONFIG.proximity
			) {
				// If within proximity set the active opacity
				CARD.style.setProperty("--active", "1");
			} else {
				CARD.style.setProperty("--active", CONFIG.opacity.toString());
			}
			const CARD_CENTER = [
				CARD_BOUNDS.left + CARD_BOUNDS.width * 0.5,
				CARD_BOUNDS.top + CARD_BOUNDS.height * 0.5,
			];
			let ANGLE =
				(Math.atan2(
					event?.y - CARD_CENTER[1],
					event?.x - CARD_CENTER[0],
				) *
					180) /
				Math.PI;
			ANGLE = ANGLE < 0 ? ANGLE + 360 : ANGLE;
			CARD.style.setProperty("--start", (ANGLE + 90).toString());
		}
	};

	document.body.addEventListener("pointermove", UPDATE);

	const RESTYLE = () => {
		if (CONTAINER) {
			CONTAINER.style.setProperty("--gap", CONFIG.gap.toString());
			CONTAINER.style.setProperty("--blur", CONFIG.blur.toString());
			CONTAINER.style.setProperty("--spread", CONFIG.spread.toString());
			CONTAINER.style.setProperty(
				"--direction",
				CONFIG.vertical ? "column" : "row",
			);
		}
	};

	RESTYLE();
	// UPDATE();
</script>

<style>
	@font-face {
		font-family: "Aber Mono";
		src: url("/src/assets/fonts/Aber-Mono-Regular.otf") format("truetype");
	}

	:root {
		--bg: hsl(246 44% 7%);
		--border: hsl(280 10% 50% / 1);
		--card: hsl(237 36% 10%);
		--color: hsl(240 18% 80%);
		--border-width: 2px;
		--border-radius: 12px;
		--gradient: conic-gradient(
			from 180deg at 50% 70%,
			hsla(0, 0%, 98%, 1) 0deg,
			#eec32d 72.0000010728836deg,
			#ec4b4b 144.0000021457672deg,
			#709ab9 216.00000858306885deg,
			#4dffbf 288.0000042915344deg,
			hsla(0, 0%, 98%, 1) 1turn
		);
	}

	*,
	*:after,
	*:before {
		box-sizing: border-box;
	}

	@property --start {
		syntax: "<number>";
		inherits: true;
		initial-value: 0;
	}

	body {
		background: var(--bg);
		display: grid;
		place-items: center;
		min-height: 100vh;
		font-family: "Geist Sans", "SF Pro Text", "SF Pro Icons", "AOS Icons",
			"Helvetica Neue", Helvetica, Arial, sans-serif, system-ui;
		font-weight: 70;
		color: var(--color);
	}

	h1 {
		font-family: "Aber Mono";
	}

	h5 {
		font-family: "Aber Mono";
	}

	a {
		font-family: "Aber Mono";
	}

	/* .container {
		--spread: 60;
		display: flex;
		flex-wrap: wrap;
		flex-direction: var(--direction);
		gap: calc(var(--gap) * 1px);
		margin: 0 auto;
		justify-content: center;
		place-items: center;
		position: relative;
		padding: 2rem;
		touch-action: none;
	} */

	article {
		--active: 0.15;
		--start: 0;
		height: 100%;
		background: var(--card);
		padding: 2rem;
		aspect-ratio: 330 / 400;
		border-radius: var(--border-radius);
		width: 40rem;
		height: 25rem;
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
		position: relative;
	}

	article:is(:hover, :focus-visible) {
		z-index: 2;
	}

	.glows {
		pointer-events: none;
		position: absolute;
		inset: 0;
		filter: blur(calc(var(--blur) * 1px));
	}

	.glows::after,
	.glows::before {
		--alpha: 0;
		content: "";
		background: var(--gradient);
		background-attachment: fixed;
		position: absolute;
		inset: -5px;
		border: 10px solid transparent;
		border-radius: var(--border-radius);
		mask: linear-gradient(#0000, #0000),
			conic-gradient(
				from calc((var(--start) - (var(--spread) * 0.5)) * 1deg),
				#000 0deg,
				#fff,
				#0000 calc(var(--spread) * 1deg)
			);
		mask-composite: intersect;
		mask-clip: padding-box, border-box;
		opacity: var(--active);
		transition: opacity 1s;
	}

	article::before {
		position: absolute;
		inset: 0;
		border: var(--border-width) solid transparent;
		content: "";
		border-radius: var(--border-radius);
		pointer-events: none;
		background: var(--border);
		background-attachment: fixed;
		border-radius: var(--border-radius);
		mask: linear-gradient(#0000, #0000),
			conic-gradient(
				from
					calc(
						(
								(var(--start) + (var(--spread) * 0.25)) -
									(var(--spread) * 1.5)
							) * 1deg
					),
				hsl(0 0% 100% / 0.15) 0deg,
				white,
				hsl(0 0% 100% / 0.15) calc(var(--spread) * 2.5deg)
			);
		mask-clip: padding-box, border-box;
		mask-composite: intersect;
		opacity: var(--active);
		transition: opacity 1s;
	}

	article::after {
		--bg-size: 100%;
		content: "";
		pointer-events: none;
		position: absolute;
		background: var(--gradient);
		background-attachment: fixed;
		border-radius: var(--border-radius);
		opacity: var(--active, 0);
		transition: opacity 1s;
		--alpha: 0;
		inset: 0;
		border: var(--border-width) solid transparent;
		mask: linear-gradient(#0000, #0000),
			conic-gradient(
				from
					calc(
						(
								(var(--start) + (var(--spread) * 0.25)) -
									(var(--spread) * 0.5)
							) * 1deg
					),
				#0000 0deg,
				#fff,
				#0000 calc(var(--spread) * 0.5deg)
			);
		filter: brightness(1.5);
		mask-clip: padding-box, border-box;
		mask-composite: intersect;
	}

	.badge {
		border: 2px solid var(--border);
		align-self: start;
		border-radius: 100px;
		padding: 0.5rem 0.7rem;
		font-size: 0.675rem;
		display: flex;
		align-items: center;
		gap: 0.25rem;
		font-weight: 50;
	}

	/* a {
		color: var(--color);
		text-decoration: none;
		opacity: 0.5;
		display: inline-block;
		align-self: start;
		transition: opacity 0.2s;
	} */

	/* a:is(:hover, :focus-visible) {
		opacity: 1;
	} */

	/* article h2 {
		margin: 0;
		padding: 1rem 0;
		font-weight: 100;
		font-size: 1.5rem;
	} */

	.header {
		position: relative;
		flex: 1;
		display: flex;
		align-items: center;
	}

	.header svg {
		--count: 4;
		width: 106px;
	}

	.header svg:nth-of-type(2),
	.header svg:nth-of-type(3),
	.header svg:nth-of-type(4) {
		position: absolute;
		z-index: calc(var(--count) - var(--index));
		translate: calc(var(--index) * 30%) 0;
		opacity: calc(var(--count) / (2 * (var(--index) * 10)));
	}

	.header svg:nth-of-type(2) {
		--index: 1;
	}
	.header svg:nth-of-type(3) {
		--index: 2;
	}
	.header svg:nth-of-type(4) {
		--index: 3;
	}

	.badge svg {
		width: 16px;
	}

	.dg.ac {
		z-index: 99999 !important;
	}
</style>
